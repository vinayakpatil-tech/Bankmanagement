// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract Bank {
    struct Account {
        string name;
        uint256 accountNumber;
        address location;
    }

    mapping(uint256 => Account) private accounts;
    address private admin;
    uint256 private contractBalance;
    bool private balanceUpdated;

    event BalanceUpdated(uint256 oldBalance, uint256 newBalance);
    event AccountCreated(uint256 accountNumber, string name, address location);
    event FundsDeposited(address indexed sender, uint256 amount);

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only the admin can perform this action");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function createAccount(string memory _name, uint256 _accountNumber, address _location) public onlyAdmin {
        require(accounts[_accountNumber].accountNumber == 0, "Account number already exists");
        accounts[_accountNumber] = Account(_name, _accountNumber, _location);
        emit AccountCreated(_accountNumber, _name, _location);
    }

    function depositFunds() public payable {
        require(msg.value > 1 ether, "Deposit amount must be greater than 1 Ether");
        emit FundsDeposited(msg.sender, msg.value);
    }

    function updateBalance() public onlyAdmin {
        uint256 oldBalance = contractBalance;
        contractBalance = address(this).balance;
        balanceUpdated = true;
        emit BalanceUpdated(oldBalance, contractBalance);
    }

    function checkBalance() public view onlyAdmin returns (uint256) {
        require(balanceUpdated, "Balance update required before checking");
        return contractBalance;
    }
}
